// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: api/proto/numsstreamer.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NumsStreamerClient is the client API for NumsStreamer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NumsStreamerClient interface {
	Authenticate(ctx context.Context, in *AuthenticationRequest, opts ...grpc.CallOption) (*AuthenticationResponse, error)
	StartStream(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (NumsStreamer_StartStreamClient, error)
	StopStream(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
}

type numsStreamerClient struct {
	cc grpc.ClientConnInterface
}

func NewNumsStreamerClient(cc grpc.ClientConnInterface) NumsStreamerClient {
	return &numsStreamerClient{cc}
}

func (c *numsStreamerClient) Authenticate(ctx context.Context, in *AuthenticationRequest, opts ...grpc.CallOption) (*AuthenticationResponse, error) {
	out := new(AuthenticationResponse)
	err := c.cc.Invoke(ctx, "/api.NumsStreamer/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *numsStreamerClient) StartStream(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (NumsStreamer_StartStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &NumsStreamer_ServiceDesc.Streams[0], "/api.NumsStreamer/StartStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &numsStreamerStartStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NumsStreamer_StartStreamClient interface {
	Recv() (*IncreasingNumber, error)
	grpc.ClientStream
}

type numsStreamerStartStreamClient struct {
	grpc.ClientStream
}

func (x *numsStreamerStartStreamClient) Recv() (*IncreasingNumber, error) {
	m := new(IncreasingNumber)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *numsStreamerClient) StopStream(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, "/api.NumsStreamer/StopStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NumsStreamerServer is the server API for NumsStreamer service.
// All implementations must embed UnimplementedNumsStreamerServer
// for forward compatibility
type NumsStreamerServer interface {
	Authenticate(context.Context, *AuthenticationRequest) (*AuthenticationResponse, error)
	StartStream(*StartRequest, NumsStreamer_StartStreamServer) error
	StopStream(context.Context, *StopRequest) (*StopResponse, error)
	mustEmbedUnimplementedNumsStreamerServer()
}

// UnimplementedNumsStreamerServer must be embedded to have forward compatible implementations.
type UnimplementedNumsStreamerServer struct {
}

func (UnimplementedNumsStreamerServer) Authenticate(context.Context, *AuthenticationRequest) (*AuthenticationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedNumsStreamerServer) StartStream(*StartRequest, NumsStreamer_StartStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method StartStream not implemented")
}
func (UnimplementedNumsStreamerServer) StopStream(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopStream not implemented")
}
func (UnimplementedNumsStreamerServer) mustEmbedUnimplementedNumsStreamerServer() {}

// UnsafeNumsStreamerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NumsStreamerServer will
// result in compilation errors.
type UnsafeNumsStreamerServer interface {
	mustEmbedUnimplementedNumsStreamerServer()
}

func RegisterNumsStreamerServer(s grpc.ServiceRegistrar, srv NumsStreamerServer) {
	s.RegisterService(&NumsStreamer_ServiceDesc, srv)
}

func _NumsStreamer_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NumsStreamerServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NumsStreamer/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NumsStreamerServer).Authenticate(ctx, req.(*AuthenticationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NumsStreamer_StartStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StartRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NumsStreamerServer).StartStream(m, &numsStreamerStartStreamServer{stream})
}

type NumsStreamer_StartStreamServer interface {
	Send(*IncreasingNumber) error
	grpc.ServerStream
}

type numsStreamerStartStreamServer struct {
	grpc.ServerStream
}

func (x *numsStreamerStartStreamServer) Send(m *IncreasingNumber) error {
	return x.ServerStream.SendMsg(m)
}

func _NumsStreamer_StopStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NumsStreamerServer).StopStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NumsStreamer/StopStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NumsStreamerServer).StopStream(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NumsStreamer_ServiceDesc is the grpc.ServiceDesc for NumsStreamer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NumsStreamer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.NumsStreamer",
	HandlerType: (*NumsStreamerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _NumsStreamer_Authenticate_Handler,
		},
		{
			MethodName: "StopStream",
			Handler:    _NumsStreamer_StopStream_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartStream",
			Handler:       _NumsStreamer_StartStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/proto/numsstreamer.proto",
}
